<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

   <!-- 引入数据库等配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />

    <!-- 定义数据监测系统元数据的数据源 -->
    <bean id="monitor" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.jdbcUrl}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"></property>
        <!-- 连接池创建的连接的默认的read-only状态 -->
        <property name="defaultReadOnly" value="false"></property>
    </bean>

    <!-- spring和MyBatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="monitor" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/monitor/*.xml"></property>
    </bean>

    <!-- 在此定义一个sqlSession，可以在需要的时候引入该bean -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
        <constructor-arg ref="sqlSessionFactory" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动扫描其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 自动扫描dao接口 -->
        <property name="basePackage" value="com.h3c.bigdata.dms.dao.monitor" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 声明式事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="monitor" />
    </bean>
    <!-- 通过注解的方式实现声明式事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 定义业务数据库数据源 -->
    <bean id="orcl" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.oracle.driver}" />
        <property name="url" value="${jdbc.oracle.jdbcUrl}" />
        <property name="username" value="${jdbc.oracle.username}" />
        <property name="password" value="${jdbc.oracle.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.oracle.initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.oracle.maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.oracle.maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.oracle.minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.oracle.maxWait}"></property>
    </bean>

    <!-- spring和MyBatis整合 -->
    <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="orcl" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/orcl/*.xml"></property>
    </bean>

    <!-- 在此定义一个sqlSession，可以在需要的时候引入该bean -->
    <bean id="sqlSessionTemplate2" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
        <constructor-arg ref="sqlSessionFactory2" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动扫描其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 自动扫描dao接口 -->
        <property name="basePackage" value="com.h3c.bigdata.dms.dao.orcl" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"></property>
    </bean>

    <!-- 声明式事务管理 -->
    <bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="orcl" />
    </bean>
    <!-- 通过注解的方式实现声明式事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager2" />


    <!-- 定义业务数据库数据源 -->
    <bean id="ds1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.dms.driver}" />
        <property name="url" value="${jdbc.dms.jdbcUrl}" />
        <property name="username" value="${jdbc.dms.username}" />
        <property name="password" value="${jdbc.dms.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc.dms.initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${jdbc.dms.maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${jdbc.dms.maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc.dms.minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc.dms.maxWait}"></property>
        
        <!-- 连接被泄露时是否打印 -->  
        <property name="logAbandoned" value="true"/>  
        <!--removeAbandoned: 是否自动回收超时连接-->    
        <property name="removeAbandoned"  value="true"/>  
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
        <property name="removeAbandonedTimeout" value="10"/>  
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>  
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
        <property name="numTestsPerEvictionRun" value="10"/>  
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
        <property name="minEvictableIdleTimeMillis" value="10000"/>  
    </bean>

    <!-- spring和MyBatis整合 -->
    <bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="ds1" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!-- 在此定义一个sqlSession，可以在需要的时候引入该bean -->
    <bean id="sqlSessionTemplate1" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
        <constructor-arg ref="sqlSessionFactory1" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动扫描其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 自动扫描dao接口 -->
        <property name="basePackage" value="com.h3c.bigdata.dms.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory1"></property>
    </bean>

    <!-- 声明式事务管理 -->
    <bean id="transactionManager1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds1" />
    </bean>
    <!-- 通过注解的方式实现声明式事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager1" />

</beans>